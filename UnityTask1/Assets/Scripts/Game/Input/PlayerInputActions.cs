//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Game/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""5cec0992-e592-49a2-a361-181efe43a2a0"",
            ""actions"": [
                {
                    ""name"": ""SwitchWeaponMain"",
                    ""type"": ""Button"",
                    ""id"": ""b1e4df84-8c55-4de9-b004-7cd8be93ad30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerMovementHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""6c2174ec-794e-41d1-9a25-c4ce3e06958f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerMovementVertical"",
                    ""type"": ""Value"",
                    ""id"": ""270f6547-26bb-48a2-8453-592301b40cd8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e9b35bd7-db8d-48cf-9211-9d15105e1530"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""db11705d-f750-41f4-8a19-925e434fd32c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6eac01f-e7dd-4b0f-8dfb-04ead26dee8e"",
                    ""path"": ""<Keyboard>/#(1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeaponMain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""687fd88f-dfc6-464b-9fd3-98341b6ffaa8"",
                    ""path"": ""<Keyboard>/#(2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeaponMain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Horizontal"",
                    ""id"": ""24dd65e1-a1fc-42f0-b46a-d2f38825c877"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e3eb4cee-f167-43cd-864e-27f0ae671b8e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5f23eb47-d8ab-4958-8906-d3efb6b444b2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vectical"",
                    ""id"": ""80da199b-8b1f-460c-a5bf-d17622d93e82"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementVertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""452c8c1c-76dc-4c53-9fc9-49df733a21f4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""38d33b7e-d470-4c8c-9ad5-90fda11b47dd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovementVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e06aaf1e-65e6-4ce8-a5c8-fca118aaf152"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""747ac930-bb17-438e-9429-54a9f79cf996"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInput
        m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
        m_PlayerInput_SwitchWeaponMain = m_PlayerInput.FindAction("SwitchWeaponMain", throwIfNotFound: true);
        m_PlayerInput_PlayerMovementHorizontal = m_PlayerInput.FindAction("PlayerMovementHorizontal", throwIfNotFound: true);
        m_PlayerInput_PlayerMovementVertical = m_PlayerInput.FindAction("PlayerMovementVertical", throwIfNotFound: true);
        m_PlayerInput_Jump = m_PlayerInput.FindAction("Jump", throwIfNotFound: true);
        m_PlayerInput_Shoot = m_PlayerInput.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInput
    private readonly InputActionMap m_PlayerInput;
    private List<IPlayerInputActions> m_PlayerInputActionsCallbackInterfaces = new List<IPlayerInputActions>();
    private readonly InputAction m_PlayerInput_SwitchWeaponMain;
    private readonly InputAction m_PlayerInput_PlayerMovementHorizontal;
    private readonly InputAction m_PlayerInput_PlayerMovementVertical;
    private readonly InputAction m_PlayerInput_Jump;
    private readonly InputAction m_PlayerInput_Shoot;
    public struct PlayerInputActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerInputActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchWeaponMain => m_Wrapper.m_PlayerInput_SwitchWeaponMain;
        public InputAction @PlayerMovementHorizontal => m_Wrapper.m_PlayerInput_PlayerMovementHorizontal;
        public InputAction @PlayerMovementVertical => m_Wrapper.m_PlayerInput_PlayerMovementVertical;
        public InputAction @Jump => m_Wrapper.m_PlayerInput_Jump;
        public InputAction @Shoot => m_Wrapper.m_PlayerInput_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Add(instance);
            @SwitchWeaponMain.started += instance.OnSwitchWeaponMain;
            @SwitchWeaponMain.performed += instance.OnSwitchWeaponMain;
            @SwitchWeaponMain.canceled += instance.OnSwitchWeaponMain;
            @PlayerMovementHorizontal.started += instance.OnPlayerMovementHorizontal;
            @PlayerMovementHorizontal.performed += instance.OnPlayerMovementHorizontal;
            @PlayerMovementHorizontal.canceled += instance.OnPlayerMovementHorizontal;
            @PlayerMovementVertical.started += instance.OnPlayerMovementVertical;
            @PlayerMovementVertical.performed += instance.OnPlayerMovementVertical;
            @PlayerMovementVertical.canceled += instance.OnPlayerMovementVertical;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IPlayerInputActions instance)
        {
            @SwitchWeaponMain.started -= instance.OnSwitchWeaponMain;
            @SwitchWeaponMain.performed -= instance.OnSwitchWeaponMain;
            @SwitchWeaponMain.canceled -= instance.OnSwitchWeaponMain;
            @PlayerMovementHorizontal.started -= instance.OnPlayerMovementHorizontal;
            @PlayerMovementHorizontal.performed -= instance.OnPlayerMovementHorizontal;
            @PlayerMovementHorizontal.canceled -= instance.OnPlayerMovementHorizontal;
            @PlayerMovementVertical.started -= instance.OnPlayerMovementVertical;
            @PlayerMovementVertical.performed -= instance.OnPlayerMovementVertical;
            @PlayerMovementVertical.canceled -= instance.OnPlayerMovementVertical;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IPlayerInputActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputActions @PlayerInput => new PlayerInputActions(this);
    public interface IPlayerInputActions
    {
        void OnSwitchWeaponMain(InputAction.CallbackContext context);
        void OnPlayerMovementHorizontal(InputAction.CallbackContext context);
        void OnPlayerMovementVertical(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
